DO $$ DECLARE
  r RECORD;
BEGIN
  FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP
      EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';
  END LOOP;
END $$;


--BOOKING
CREATE SEQUENCE reservation.booking_seq
    START 1
    INCREMENT 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

-- Kreiraj tabelu booking u Å¡emi "reservation"
CREATE TABLE reservation.booking (
    BookingId INTEGER DEFAULT nextval('reservation.booking_seq') PRIMARY KEY,
    CheckInDate DATE NOT NULL,
    CheckOutDate DATE NOT NULL,
    TotalAmount NUMERIC(10, 2) NOT NULL,
    Status VARCHAR(50) NOT NULL,
    UserId text NOT NULL,
    CONSTRAINT fk_user
        FOREIGN KEY (UserId)
        REFERENCES identity."Users"("Id")
);

-- Kreiraj triger funkciju za automatsko generisanje BookingId
CREATE OR REPLACE FUNCTION reservation.booking_bir()
    RETURNS TRIGGER AS $$
BEGIN
    NEW.BookingId := nextval('reservation.booking_seq');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Kreiraj triger za automatsko pozivanje funkcije pri umetanju novog reda
CREATE TRIGGER booking_before_insert
    BEFORE INSERT ON reservation.booking
    FOR EACH ROW
    EXECUTE FUNCTION reservation.booking_bir();
CREATE TABLE property.Destination (
    Id SERIAL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Description TEXT,
    Longitude NUMERIC(10, 6) NOT NULL,
    Latitude NUMERIC(10, 6) NOT NULL,
    Country VARCHAR(50) NOT NULL
);
CREATE TABLE "property".Property (
    PropertyId SERIAL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Description TEXT,
    Address VARCHAR(255) NOT NULL,
    PPN NUMERIC(10, 2) NOT NULL,
    Type VARCHAR(50) NOT NULL,
    UserId text NOT NULL,
    DestinationId INTEGER NOT NULL,
    CONSTRAINT fk_user
        FOREIGN KEY (UserId)
        REFERENCES identity."Users"("Id"),
    CONSTRAINT fk_destination
        FOREIGN KEY (DestinationId)
        REFERENCES "property".Destination(Id)
);

CREATE TABLE "property".PropertyPhotos (
    Photo TEXT NOT NULL,
    PropertyId SERIAL PRIMARY KEY,
    CONSTRAINT fk_property
        FOREIGN KEY (PropertyId)
        REFERENCES "property".Property(PropertyId)
);
-- Kreiranje tabele Amenity
CREATE TABLE property.Amenity (
    AmenityId SERIAL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL
);
-- Kreiranje tabele PropertyAmenity
CREATE TABLE property.PropertyAmenity (
    PropertyAmenityId SERIAL PRIMARY KEY,
    PropertyId INTEGER NOT NULL,
    AmenityId INTEGER NOT NULL,
    CONSTRAINT fk_property
        FOREIGN KEY (PropertyId)
        REFERENCES property.Property(PropertyId),
    CONSTRAINT fk_amenity
        FOREIGN KEY (AmenityId)
        REFERENCES property.Amenity(AmenityId)
);
-- Kreiranje tabele Review
CREATE TABLE property.Review (
    ReviewId SERIAL PRIMARY KEY,
    Mark INTEGER NOT NULL CHECK (Mark >= 1 AND Mark <= 5),
    Comment TEXT,
    Date DATE NOT NULL,
    UserId text NOT NULL,
    PropertyId INTEGER NOT NULL,
    CONSTRAINT fk_user
        FOREIGN KEY (UserId)
        REFERENCES identity."Users"("Id"),
    CONSTRAINT fk_property
        FOREIGN KEY (PropertyId)
        REFERENCES property.Property(PropertyId)
);
-- Kreiranje tabele Transaction
CREATE SCHEMA "transaction";
CREATE TABLE "transaction".Transaction (
    TransactionId SERIAL PRIMARY KEY,
    Date DATE NOT NULL,
    Amount NUMERIC(10, 2) NOT NULL,
    Status VARCHAR(50) NOT NULL,
    BookingId INTEGER NOT NULL,
    CONSTRAINT fk_booking
        FOREIGN KEY (BookingId)
        REFERENCES reservation.booking(BookingId)
);
